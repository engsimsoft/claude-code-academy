/**
 * CLAUDE CODE ACADEMY - LESSONS MODULE
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å lesson cards
 * - Click handlers –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
 * - Progress bar animations
 * - State management —É—Ä–æ–∫–æ–≤
 */

/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏
 */
const Lessons = {
  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  _lessonCards: null,
  _progressData: null,

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —É—Ä–æ–∫–æ–≤
   */
  init() {
    this._lessonCards = document.querySelectorAll('.lesson-card');
    this.loadProgressData();
    this.bindEvents();
    this.updateLessonLocks();

    if (this._lessonCards.length > 0) {
      console.log('Lessons: –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫:', this._lessonCards.length);
    } else {
      console.warn('Lessons: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ä–æ–∫–æ–≤');
    }
  },

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ localStorage
   */
  loadProgressData() {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —É—Ä–æ–∫–æ–≤
    const lesson1Progress = Utils.storage('lesson1-progress') || { currentStepIndex: 0, completedSteps: 0 };

    this._progressData = Utils.storage('claude-lessons-progress') || {
      lesson1: {
        progress: lesson1Progress.completedSteps === 8 ? 100 : Math.round((lesson1Progress.completedSteps / 8) * 100),
        completed: lesson1Progress.completedSteps === 8
      },
      lesson2: { progress: 0, completed: false },
      lesson3: { progress: 0, completed: false },
      lesson4: { progress: 0, completed: false }
    };

    this.updateAllProgressBars();
    this.updateLessonLocks();
  },

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ localStorage
   */
  saveProgressData() {
    Utils.storage('claude-lessons-progress', this._progressData);
  },

  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  bindEvents() {
    // Event delegation –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Ä–æ–∫–æ–≤
    document.addEventListener('click', Utils.createDelegatedHandler('.lesson-card', (event) => {
      this.handleLessonCardClick(event);
    }));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.addEventListener('keydown', (event) => {
      if (event.target.classList.contains('lesson-card')) {
        this.handleLessonCardKeydown(event);
      }
    });
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ —É—Ä–æ–∫–∞
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
   */
  handleLessonCardClick(event) {
    const card = event.currentTarget;
    const lessonNumber = this.getLessonNumber(card);

    if (lessonNumber) {
      this.incrementProgress(lessonNumber);
      this.animateProgressBar(card);

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      this.addClickFeedback(card);
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
   * @param {Event} event - –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
   */
  handleLessonCardKeydown(event) {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      this.handleLessonCardClick(event);
    }
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
   * @param {Element} card - –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Ä–æ–∫–∞
   * @returns {number|null} - –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞
   */
  getLessonNumber(card) {
    const numberElement = card.querySelector('.lesson-number');
    if (numberElement) {
      return parseInt(numberElement.textContent);
    }
    return null;
  },

  /**
   * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞
   * @param {number} lessonNumber - –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞
   */
  incrementProgress(lessonNumber) {
    const lessonKey = `lesson${lessonNumber}`;
    const currentProgress = this._progressData[lessonKey].progress;

    if (currentProgress < 100) {
      const newProgress = Math.min(currentProgress + 25, 100);
      this._progressData[lessonKey].progress = newProgress;

      if (newProgress === 100) {
        this._progressData[lessonKey].completed = true;
        this.handleLessonCompletion(lessonNumber);
      }

      this.saveProgressData();
    }
  },

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
   * @param {number} lessonNumber - –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞
   */
  handleLessonCompletion(lessonNumber) {
    console.log(`–£—Ä–æ–∫ ${lessonNumber} –∑–∞–≤–µ—Ä—à–µ–Ω!`);

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
    this.showCompletionMessage(lessonNumber);

    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
    if (lessonNumber < 4) {
      this.unlockNextLesson(lessonNumber + 1);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ localStorage
    this.saveProgressData();
  },

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞
   * @param {number} lessonNumber - –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞
   */
  showCompletionMessage(lessonNumber) {
    // –°–æ–∑–¥–∞–Ω–∏–µ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const toast = document.createElement('div');
    toast.className = 'completion-toast';
    toast.innerHTML = `
      <div class="toast-content">
        <span class="toast-icon">üéâ</span>
        <span>–£—Ä–æ–∫ ${lessonNumber} –∑–∞–≤–µ—Ä—à–µ–Ω!</span>
      </div>
    `;

    document.body.appendChild(toast);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    Utils.addClassWithAnimation(toast, 'show', 100);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }, 3000);
  },

  /**
   * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
   * @param {number} nextLessonNumber - –ù–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
   */
  unlockNextLesson(nextLessonNumber) {
    console.log(`Lessons: –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–∫–∞ ${nextLessonNumber}`);

    const nextCard = document.querySelector(`[data-lesson="${nextLessonNumber}"]`);
    console.log('Lessons: –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:', nextCard);

    if (nextCard) {
      console.log('Lessons: –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —É—Ä–æ–∫', nextLessonNumber);

      // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å locked, –¥–æ–±–∞–≤–ª—è–µ–º unlocked
      nextCard.classList.remove('locked');
      nextCard.classList.add('unlocked');
      nextCard.removeAttribute('aria-disabled');
      console.log('Lessons: –ö–ª–∞—Å—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

      // –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–æ–∫ –∑–∞–º–∫–∞
      const lockIcon = nextCard.querySelector('.lesson-lock');
      if (lockIcon) {
        lockIcon.remove();
        console.log('Lessons: –ó–Ω–∞—á–æ–∫ –∑–∞–º–∫–∞ —É–¥–∞–ª–µ–Ω');
      }

      // –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞
      if (!nextCard.parentNode.classList.contains('lesson-card-link')) {
        console.log('Lessons: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å—Å—ã–ª–∫—É');
        const lessonLink = document.createElement('a');
        lessonLink.href = `lesson-${nextLessonNumber}.html`;
        lessonLink.className = 'lesson-card-link';
        lessonLink.style.display = 'block';
        lessonLink.style.textDecoration = 'none';
        lessonLink.style.color = 'inherit';

        nextCard.parentNode.replaceChild(lessonLink, nextCard);
        lessonLink.appendChild(nextCard);
        console.log('Lessons: –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.log('Lessons: –ö–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ —Å—Å—ã–ª–∫—É');
      }
    } else {
      console.error(`Lessons: –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Ä–æ–∫–∞ ${nextLessonNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
  },

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–∫–æ–≤
   */
  updateLessonLocks() {
    console.log('Lessons: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–∫–æ–≤');
    const lessonCards = document.querySelectorAll('.lesson-card');
    console.log('Lessons: –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫:', lessonCards.length);

    lessonCards.forEach((card, index) => {
      const lessonNumber = index + 1;
      const lessonData = this._progressData[`lesson${lessonNumber}`];
      console.log(`Lessons: –£—Ä–æ–∫ ${lessonNumber}, –¥–∞–Ω–Ω—ã–µ:`, lessonData);

      // –í—Å–µ —É—Ä–æ–∫–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
      card.classList.remove('locked');
      card.classList.add('unlocked');
      card.removeAttribute('aria-disabled');
      console.log(`Lessons: –£—Ä–æ–∫ ${lessonNumber} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);

      // –£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–æ–∫ –∑–∞–º–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
      const lockIcon = card.querySelector('.lesson-lock');
      if (lockIcon) {
        lockIcon.remove();
        console.log('Lessons: –ó–Ω–∞—á–æ–∫ –∑–∞–º–∫–∞ —É–¥–∞–ª–µ–Ω');
      }

      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ —Å—Å—ã–ª–∫—É
      if (!card.parentNode.classList.contains('lesson-card-link')) {
        console.log(`Lessons: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —É—Ä–æ–∫ ${lessonNumber} –≤ —Å—Å—ã–ª–∫—É`);
        const lessonLink = document.createElement('a');
        lessonLink.href = `lesson-${lessonNumber}.html`;
        lessonLink.className = 'lesson-card-link';
        lessonLink.style.display = 'block';
        lessonLink.style.textDecoration = 'none';
        lessonLink.style.color = 'inherit';

        card.parentNode.replaceChild(lessonLink, card);
        lessonLink.appendChild(card);
      }

      // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressText = card.querySelector('.progress-text');
      if (progressText) {
        if (lessonData && lessonData.completed) {
          progressText.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
        } else if (lessonData && lessonData.progress > 0) {
          progressText.textContent = `${lessonData.progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
        } else {
          progressText.textContent = '–î–æ—Å—Ç—É–ø–Ω–æ';
        }
      }
    });
  },

  /**
   * –ê–Ω–∏–º–∞—Ü–∏—è progress bar
   * @param {Element} card - –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Ä–æ–∫–∞
   */
  animateProgressBar(card) {
    const progressFill = card.querySelector('.progress-fill');
    const progressText = card.querySelector('.progress-text');
    const lessonNumber = this.getLessonNumber(card);

    if (progressFill && lessonNumber) {
      const newProgress = this._progressData[`lesson${lessonNumber}`].progress;

      // –ê–Ω–∏–º–∞—Ü–∏—è progress bar
      progressFill.style.width = `${newProgress}%`;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
      if (newProgress === 100) {
        progressText.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      } else {
        progressText.textContent = `${newProgress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
      }
    }
  },

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö progress bars
   */
  updateAllProgressBars() {
    this._lessonCards.forEach(card => {
      this.animateProgressBar(card);
    });

    // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É—Ä–æ–∫–∞
    const lesson1Progress = Utils.storage('lesson1-progress');
    if (lesson1Progress) {
      const progressPercent = lesson1Progress.completedSteps === 8 ? 100 : Math.round((lesson1Progress.completedSteps / 8) * 100);
      const progressFill = document.getElementById('lesson1-progress');
      const progressText = document.getElementById('lesson1-text');

      if (progressFill) {
        progressFill.style.width = `${progressPercent}%`;
      }

      if (progressText) {
        if (progressPercent === 100) {
          progressText.textContent = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
        } else if (progressPercent > 0) {
          progressText.textContent = `${progressPercent}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
        } else {
          progressText.textContent = '–ù–µ –Ω–∞—á–∞—Ç–æ';
        }
      }
    }
  },

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ
   * @param {Element} card - –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Ä–æ–∫–∞
   */
  addClickFeedback(card) {
    card.classList.add('clicked');

    setTimeout(() => {
      card.classList.remove('clicked');
    }, 200);
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–∫–æ–≤
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getLessonsStats() {
    const totalLessons = Object.keys(this._progressData).length;
    const completedLessons = Object.values(this._progressData).filter(lesson => lesson.completed).length;
    const totalProgress = Object.values(this._progressData).reduce((sum, lesson) => sum + lesson.progress, 0);
    const averageProgress = Math.round(totalProgress / totalLessons);

    return {
      totalLessons,
      completedLessons,
      averageProgress,
      completionRate: Math.round((completedLessons / totalLessons) * 100)
    };
  },

  /**
   * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  resetProgress() {
    this._progressData = {
      lesson1: { progress: 100, completed: true },
      lesson2: { progress: 75, completed: false },
      lesson3: { progress: 40, completed: false },
      lesson4: { progress: 0, completed: false }
    };
    this.saveProgressData();
    this.updateAllProgressBars();
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  Lessons.init();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.Lessons = Lessons;
